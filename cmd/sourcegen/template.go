package main // import "golang.handcraftedbits.com/ezif/cmd/sourcegen"

//
// Private variables
//

var templateAccessorImplSource = `// Code generated by ezif.  DO NOT EDIT.

package {{ .PackageName | LastPackage }} // import "golang.handcraftedbits.com/ezif/{{ .PackageName }}"

import (
	"math/big"

	"golang.handcraftedbits.com/ezif/helper"
	"golang.handcraftedbits.com/ezif/metadata"
	"golang.handcraftedbits.com/ezif/types"
)

//
// Public functions
//

{{ range .AccessorInfos }}
	// New{{ .Name }}Accessor creates an accessor for image metadata properties with {{ .Type }} values.
	func New{{ .Name }}Accessor (properties metadata.Properties, key string) helper.{{ .Name }}Accessor {
		if !properties.HasKey(key) {
			return nil
		}

		return &{{ .ImplName }}AccessorImpl{
			property: properties.Get(key),
		}
	}
{{ end }}

//
// Private types
//

{{ range .AccessorInfos }}
	// helper.{{ .Name }}Accessor implementation
	type {{ .ImplName }}AccessorImpl struct {
		property metadata.Property
	}

	func (accessor *{{ .ImplName }}AccessorImpl) Raw () {{ .Type }} {
		{{- if .IsSlice }}
			return accessor.property.Value().({{ .Type }})
		{{ else }}
			return accessor.property.Value().([]{{ .Type }})[0]
		{{ end -}}
	}

	func (accessor *{{ .ImplName }}AccessorImpl) Interpreted () string {
		return accessor.property.InterpretedValue()
	}
{{ end }}
`

var templateAccessorIntfSource = `// Code generated by ezif.  DO NOT EDIT.

package {{ .PackageName | LastPackage }} // import "golang.handcraftedbits.com/ezif/{{ .PackageName }}"

import (
	"math/big"

	"golang.handcraftedbits.com/ezif/types"
)

//
// Public types
//

// Accessor is the interface used to access interpreted image metadata property values.
type Accessor interface {
	// Interpreted accesses the interpreted value of an image metadata property.
	Interpreted () string
}

{{ range .AccessorInfos }}
// {{ .Name }} is the interface used to access image metadata properties with {{ .Type }} values.
type {{ .Name }}Accessor interface {
	Accessor

	// Raw accesses the raw {{ .Type }} value of an image metadata property.
	Raw () {{ .Type }}
}
{{ end }}
`

var templateGroupSource = `// Code generated by ezif.  DO NOT EDIT.

// Package {{ .PackageName | LastPackage }} defines helper functions for accessing {{ .PackageDescription }}.
//
// See the Exiv2 documentation for more information: {{ .Reference }}
package {{ .PackageName | LastPackage }} // import "golang.handcraftedbits.com/ezif/helper/{{ .PackageName }}"

import (
	"golang.handcraftedbits.com/ezif/helper"
	"golang.handcraftedbits.com/ezif/helper/internal"
	"golang.handcraftedbits.com/ezif/metadata"
)

{{- $disabledHelpers := .DisabledHelpers }}
{{- $functionMappings := .FunctionMappings }}

//
// Public functions
//

{{ range .FunctionNames }}
	{{- $functionInfo := index $functionMappings . }}
	
	{{- if IsHelperEnabled $functionInfo $disabledHelpers }}
		// {{ . }} is used to get or set the "{{ $functionInfo.Tag.Label }}" {{ PropertyName $functionInfo }} ` +
	`metadata property, which is described as: "{{ $functionInfo.Tag.Description | FixDescription }}."
		//
		// See the Exiv2 documentation regarding property "{{ $functionInfo.FullTagName }}" for more information.
		//
		// Note that this function will return nil if the image metadata does not contain this property.
		func {{ . }} (collection metadata.Collection) helper.{{ ReturnType $functionInfo }}Accessor {
			return internal.New{{ ReturnType $functionInfo }}Accessor(collection.{{ PropertyName $functionInfo }}(), ` +
	`"{{ $functionInfo.FullTagName }}")
		}
	{{ end -}}
{{ end -}}
`

var templateGroupTestSource = `// Code generated by ezif.  DO NOT EDIT.

package {{ .PackageName | LastPackage }} // import "golang.handcraftedbits.com/ezif/helper/{{ .PackageName }}"

import (
	"testing"

	"golang.handcraftedbits.com/ezif/helper"
	"golang.handcraftedbits.com/ezif/metadata"
	"golang.handcraftedbits.com/ezif/types"
	eziftest "golang.handcraftedbits.com/ezif/helper/internal/testing"
)

{{- $disabledHelpers := .DisabledHelpers }}
{{- $disabledTests := .DisabledTests }}
{{- $functionMappings := .FunctionMappings }}

//
// Public functions
//

{{ range .FunctionNames }}
	{{- $functionInfo := index $functionMappings . }}
	
	{{- if and (IsHelperEnabled $functionInfo $disabledHelpers) (IsTestEnabled $functionInfo $disabledTests) }}
		func Test{{ . }} (t *testing.T) {
			eziftest.GeneratedTests(t, &eziftest.GeneratedTestContext{
				AccessorFunc: func(collection metadata.Collection) helper.Accessor {
					return {{ . }}(collection)
				},
				Family: metadata.Family{{ PropertyName $functionInfo }},
				IsSlice: {{ IsSlice $functionInfo }},
				Name: "{{ $functionInfo.FullTagName }}",
				TypeID: types.{{ $functionInfo.Tag.TypeID }},
			})
		}
	{{ end -}}
{{ end -}}
`
