package main // import "golang.handcraftedbits.com/ezif/cmd/sourcegen"

//
// Private variables
//

var templateAccessorImplSource = `// Code generated by ezif.  DO NOT EDIT.

package {{ .PackageName | LastPackage }} // import "golang.handcraftedbits.com/ezif/{{ .PackageName }}"

import (
	"math/big"

	"golang.handcraftedbits.com/ezif"
	"golang.handcraftedbits.com/ezif/helper"
)

//
// Public functions
//

{{ range .AccessorInfos }}
	// New{{ .Name }}Accessor creates an accessor for image metadata properties with {{ .Type }} values.
	func New{{ .Name }}Accessor (metadata ezif.Metadata, key string) helper.{{ .Name }}Accessor {
		var datum = metadata.Get(key)

		if datum == nil {
			return nil
		}

		return &{{ .ImplName }}AccessorImpl{
			datum: datum,
		}
	}
{{ end }}

//
// Private types
//

{{ range .AccessorInfos }}
	// helper.{{ .Name }}Accessor implementation
	type {{ .ImplName }}AccessorImpl struct {
		datum ezif.Datum
	}

	func (accessor *{{ .ImplName }}AccessorImpl) Raw () {{ .Type }} {
		return accessor.datum.Value().({{ .Type }})
	}

	func (accessor *{{ .ImplName }}AccessorImpl) Interpreted () string {
		return accessor.datum.InterpretedValue()
	}
{{ end }}
`

var templateAccessorIntfSource = `// Code generated by ezif.  DO NOT EDIT.

package {{ .PackageName | LastPackage }} // import "golang.handcraftedbits.com/ezif/{{ .PackageName }}"

import (
	"math/big"

	"golang.handcraftedbits.com/ezif"
)

//
// Public types
//

// Accessor is the interface used to access interpreted image metadata property values.
type Accessor interface {
	// Interpreted accesses the interpreted value of an image metadata property.
	Interpreted () string
}

{{ range .AccessorInfos }}
// {{ .Name }} is the interface used to access image metadata properties with {{ .Type }} values.
type {{ .Name }}Accessor interface {
	Accessor

	// Raw accesses the raw {{ .Type }} value of an image metadata property.
	Raw () {{ .Type }}
}
{{ end }}
`

var templateGroupSource = `// Code generated by ezif.  DO NOT EDIT.

/* Package {{ .PackageName | LastPackage }} defines helper functions for accessing {{ .PackageDescription }}.
 *
 * See the Exiv2 documentation for more information: {{ .Reference }}
 */
package {{ .PackageName | LastPackage }} // import "golang.handcraftedbits.com/ezif/helper/{{ .PackageName }}"

import (
{{- range RequiredImports .FunctionMappings false }}
	"{{ . }}"
{{ end -}}
)

{{- $disabledHelpers := .DisabledHelpers }}
{{- $familyName := .FamilyName -}}
{{- $functionMappings := .FunctionMappings }}

//
// Public functions
//

{{ range .FunctionNames }}
	{{- $functionInfo := index $functionMappings . }}
	
	{{- if IsHelperEnabled $functionInfo $disabledHelpers }}
		// {{ . }} is used to get or set the "{{ $functionInfo.Tag.Label }}" {{ $familyName }} metadata, which is ` +
	`described as "{{ $functionInfo.Tag.Description | FixDescription }}."  See the Exiv2 documentation regarding ` +
	`key "{{ $functionInfo.FullTagName }}" for more information.  Note that this function will return nil if the ` +
	`image metadata does not contain this property.
		func {{ . }} (metadata ezif.ImageMetadata) helper.{{ ReturnType $familyName $functionInfo }}Accessor {
			return internal.New{{ ReturnType $familyName $functionInfo }}Accessor(metadata.{{ $familyName }}(), ` +
	`"{{ $functionInfo.FullTagName }}")
		}
	{{ end -}}
{{ end -}}
`

var templateGroupTestSource = `// Code generated by ezif.  DO NOT EDIT.

package {{ .PackageName | LastPackage }} // import "golang.handcraftedbits.com/ezif/helper/{{ .PackageName }}"

import (
{{- range RequiredImports .FunctionMappings true }}
	"{{ . }}"
{{ end -}}
)

{{- $disabledHelpers := .DisabledHelpers }}
{{- $disabledTests := .DisabledTests }}
{{- $familyName := .FamilyName -}}
{{- $functionMappings := .FunctionMappings }}

//
// Public functions
//

{{ range .FunctionNames }}
	{{- $functionInfo := index $functionMappings . }}
	
	{{- if and (IsHelperEnabled $functionInfo $disabledHelpers) (IsTestEnabled $functionInfo $disabledTests) }}
		func Test{{ . }} (t *testing.T) {
			var accessorFunc = func(metadata ezif.ImageMetadata) helper.Accessor {
				return {{ . }}(metadata)
			}
			var getFunc = func(metadata ezif.ImageMetadata) interface{} {
				return {{ . }}(metadata).Raw()
			}

			t.Run(internal.SubTestMaxValue, func(t *testing.T) {
				_ = internal.TestGetValueFromHelper(t, "{{ $functionInfo.FullTagName }}", getFunc,
					{{ MaxValue $familyName $functionInfo }})
			})

			t.Run(internal.SubTestMissingValue, func(t *testing.T) {
				internal.TestGetMissingValueFromHelper(t, "{{ $functionInfo.FullTagName }}", accessorFunc)
			})
		}
	{{ end -}}
{{ end -}}
`
